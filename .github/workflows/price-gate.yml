# .github/workflows/price-gate.yml
name: Price-Lock Gate
on:
  pull_request:
    paths:
      - 'package.json'
      - 'src/config/providers.js'
      - 'docker-compose.yml'
      - '.env.example'
      - 'config/price-baseline.json'
jobs:
  price-gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - name: Ensure prices ≤ baseline
        run: |
          node --input-type=module -e "
          import { createRequire } from 'module';
          const require = createRequire(import.meta.url);
          
          // Validate baseline file exists and is readable
          let baseline;
          try {
            baseline = require('./config/price-baseline.json');
          } catch (error) {
            console.error('❌ Failed to load price baseline:', error.message);
            process.exit(1);
          }
          
          // Validate baseline structure
          if (!baseline?.baseline?.providers) {
            console.error('❌ Invalid baseline structure: missing providers');
            process.exit(1);
          }
          
          // Import and validate provider configs
          let PROVIDER_CONFIGS;
          try {
            const providerModule = await import('./src/config/providers.js');
            PROVIDER_CONFIGS = providerModule.PROVIDER_CONFIGS;
          } catch (error) {
            console.error('❌ Failed to load provider configs:', error.message);
            process.exit(1);
          }
          
          if (!PROVIDER_CONFIGS || typeof PROVIDER_CONFIGS !== 'object') {
            console.error('❌ Invalid PROVIDER_CONFIGS: not an object');
            process.exit(1);
          }
          
          const violations = [];
          const warnings = [];
          
          for (const [providerKey, providerConfig] of Object.entries(PROVIDER_CONFIGS)) {
            if (!providerConfig || typeof providerConfig !== 'object') {
              warnings.push(\`⚠️  Provider \${providerKey} has invalid config\`);
              continue;
            }
            
            const costPer1M = (providerConfig.costPerToken || 0) * 1000000;
            const baselineProvider = baseline.baseline.providers[providerKey];
            
            if (!baselineProvider) {
              warnings.push(\`⚠️  Provider \${providerKey} not found in baseline\`);
              continue;
            }
            
            if (typeof baselineProvider.costPer1M !== 'number') {
              warnings.push(\`⚠️  Provider \${providerKey} baseline cost is not a number\`);
              continue;
            }
            
            if (costPer1M > baselineProvider.costPer1M) {
              violations.push(\`\${providerKey}: \${costPer1M.toFixed(2)} > \${baselineProvider.costPer1M.toFixed(2)}\`);
            } else {
              console.log(\`✅ \${providerKey}: \${costPer1M.toFixed(2)} ≤ \${baselineProvider.costPer1M.toFixed(2)}\`);
            }
          }
          
          // Print warnings
          warnings.forEach(warning => console.warn(warning));
          
          // Check for violations
          if (violations.length > 0) {
            console.error('❌ Price lock violated:');
            violations.forEach(violation => console.error('  -', violation));
            process.exit(1);
          }
          
          console.log('✅ All provider prices are within baseline limits');
          "