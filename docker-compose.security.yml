# Lab Verse Monitoring Stack - Security Hardened Configuration
# CRITICAL: TLS/HTTPS Implementation for Production Security

version: '3.8'

services:
  # Enhanced Nginx with TLS/HTTPS
  nginx-secure:
    image: nginx:alpine
    container_name: labverse-nginx-secure
    restart: unless-stopped
    ports:
      - "80:80"    # HTTP redirect to HTTPS
      - "443:443"  # HTTPS main endpoint
    volumes:
      - ./nginx/nginx.secure.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
      - certbot-etc:/etc/letsencrypt:ro
      - certbot-var:/var/lib/letsencrypt:ro
    environment:
      - SSL_DOMAIN=${SSL_DOMAIN:-localhost}
    depends_on:
      - kimi-project-manager
      - app
    networks:
      - labverse-secure-network
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost/nginx-health", "-k"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Let's Encrypt Certificate Management
  certbot:
    image: certbot/certbot:latest
    container_name: labverse-certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/webroot:/var/www/html
    depends_on:
      - nginx-secure
    command: >
      sh -c "while :; do
        certbot renew --webroot --webroot-path=/var/www/html --quiet;
        sleep 12h;
      done"
    networks:
      - labverse-secure-network

  # Enhanced Kimi with TLS Support
  kimi-project-manager:
    build:
      context: .
      dockerfile: Dockerfile.kimi
    container_name: labverse-kimi-secure
    restart: unless-stopped
    ports:
      - "8084:8084"
      - "8443:8443"  # HTTPS endpoint
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - SSL_ENABLED=true
      - SSL_CERT_PATH=/app/ssl/cert.pem
      - SSL_KEY_PATH=/app/ssl/key.pem
      # AI Provider Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - DASHSCOPE_API_KEY=${DASHSCOPE_API_KEY:-}
      - MOONSHOT_API_KEY=${MOONSHOT_API_KEY:-}
      # Security Configuration
      - SECURITY_MODE=production
      - ENABLE_RATE_LIMITING=true
      - MAX_REQUESTS_PER_MINUTE=1000
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=https://${SSL_DOMAIN:-localhost}
      # System Configuration
      - REDIS_URL=rediss://redis:6380  # Redis with TLS
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
      - POSTGRES_URL=postgresql://labverse:${POSTGRES_PASSWORD:-labverse123}@postgres:5432/labverse?sslmode=require
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - ./ssl:/app/ssl:ro  # TLS certificates
    depends_on:
      - redis-secure
      - postgres-secure
      - prometheus
    networks:
      - labverse-secure-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('https://localhost:8443/health', verify=False)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis with TLS
  redis-secure:
    image: redis:7-alpine
    container_name: labverse-redis-secure
    restart: unless-stopped
    ports:
      - "6380:6380"  # TLS Redis port
    command: >
      redis-server
      --port 0
      --tls-port 6380
      --tls-cert-file /etc/redis/ssl/redis.crt
      --tls-key-file /etc/redis/ssl/redis.key
      --tls-ca-cert-file /etc/redis/ssl/ca.crt
      --requirepass ${REDIS_PASSWORD:-redis123}
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-secure-data:/data
      - ./ssl/redis:/etc/redis/ssl:ro
    networks:
      - labverse-secure-network
    healthcheck:
      test: ["CMD", "redis-cli", "--tls", "--cert", "/etc/redis/ssl/redis.crt", "--key", "/etc/redis/ssl/redis.key", "--cacert", "/etc/redis/ssl/ca.crt", "-p", "6380", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL with TLS
  postgres-secure:
    image: postgres:15-alpine
    container_name: labverse-postgres-secure
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=labverse
      - POSTGRES_USER=labverse
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-labverse123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-secure-data:/var/lib/postgresql/data
      - ./ssl/postgres:/var/lib/postgresql/ssl:ro
      - ./scripts/postgres-ssl-setup.sh:/docker-entrypoint-initdb.d/ssl-setup.sh:ro
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt
      -c ssl_key_file=/var/lib/postgresql/ssl/server.key
      -c ssl_ca_file=/var/lib/postgresql/ssl/ca.crt
    networks:
      - labverse-secure-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U labverse -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vault for Secret Management
  vault:
    image: hashicorp/vault:latest
    container_name: labverse-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN:-labverse-dev-token}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_API_ADDR=https://vault:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-data:/vault/data
      - ./vault/config:/vault/config:ro
      - ./ssl/vault:/vault/ssl:ro
    command: >
      sh -c '
        vault server -config=/vault/config/vault.hcl &
        sleep 10;
        export VAULT_ADDR="https://localhost:8200";
        export VAULT_SKIP_VERIFY=true;
        vault auth -method=token token=${VAULT_ROOT_TOKEN:-labverse-dev-token};
        vault secrets enable -path=labverse kv-v2;
        wait
      '
    networks:
      - labverse-secure-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced Prometheus with TLS
  prometheus-secure:
    image: prom/prometheus:latest
    container_name: labverse-prometheus-secure
    restart: unless-stopped
    ports:
      - "9090:9090"
      - "9443:9443"  # HTTPS Prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.listen-address=0.0.0.0:9090'
      - '--web.external-url=https://localhost:9443'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus-secure-data:/prometheus
      - ./ssl/prometheus:/etc/prometheus/ssl:ro
    networks:
      - labverse-secure-network
    depends_on:
      - kimi-project-manager
      - app

  # Enhanced Grafana with TLS
  grafana-secure:
    image: grafana/grafana:latest
    container_name: labverse-grafana-secure
    restart: unless-stopped
    ports:
      - "3001:3000"
      - "3443:3443"  # HTTPS Grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/etc/grafana/ssl/grafana.crt
      - GF_SERVER_CERT_KEY=/etc/grafana/ssl/grafana.key
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SERVER_ROOT_URL=https://${SSL_DOMAIN:-localhost}:3443
    volumes:
      - grafana-secure-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./ssl/grafana:/etc/grafana/ssl:ro
    networks:
      - labverse-secure-network
    depends_on:
      - prometheus-secure

  # mTLS Service Mesh (Istio-lite)
  service-mesh:
    image: envoyproxy/envoy:v1.28-latest
    container_name: labverse-service-mesh
    restart: unless-stopped
    ports:
      - "8001:8001"  # Admin interface
    volumes:
      - ./service-mesh/envoy.yaml:/etc/envoy/envoy.yaml:ro
      - ./ssl/service-mesh:/etc/envoy/ssl:ro
    networks:
      - labverse-secure-network
    command: >
      envoy -c /etc/envoy/envoy.yaml
      --service-cluster labverse-mesh
      --service-node labverse-node

  # SPIFFE/SPIRE Identity Provider
  spire-server:
    image: ghcr.io/spiffe/spire-server:1.8.0
    container_name: labverse-spire-server
    restart: unless-stopped
    ports:
      - "8081:8081"
    volumes:
      - spire-server-data:/opt/spire/data
      - ./spire/server.conf:/opt/spire/conf/server/server.conf:ro
    networks:
      - labverse-secure-network
    command: >
      /opt/spire/bin/spire-server run
      -config /opt/spire/conf/server/server.conf

  # Security Scanner (Trivy)
  security-scanner:
    image: aquasec/trivy:latest
    container_name: labverse-security-scanner
    restart: "no"
    volumes:
      - trivy-cache:/root/.cache
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - labverse-secure-network
    command: >
      sh -c '
        while true; do
          trivy image --security-checks vuln,config labverse-kimi-secure;
          trivy image --security-checks vuln,config labverse-app;
          sleep 3600;
        done
      '

  # QuantumGuard eBPF Security
  quantumguard:
    image: falcosecurity/falco:latest
    container_name: labverse-quantumguard
    restart: unless-stopped
    privileged: true
    ports:
      - "8085:8765"  # gRPC API
    environment:
      - FALCO_GRPC_ENABLED=true
      - FALCO_GRPC_BIND_ADDRESS=0.0.0.0:8765
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock:ro
      - /dev:/host/dev:ro
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - /etc:/host/etc:ro
      - ./security/falco.yaml:/etc/falco/falco.yaml:ro
      - ./security/rules:/etc/falco/rules:ro
    networks:
      - labverse-secure-network
    command: >
      falco
      --config /etc/falco/falco.yaml
      --grpc-bind-address 0.0.0.0:8765

volumes:
  redis-secure-data:
    driver: local
  postgres-secure-data:
    driver: local
  prometheus-secure-data:
    driver: local
  grafana-secure-data:
    driver: local
  vault-data:
    driver: local
  spire-server-data:
    driver: local
  trivy-cache:
    driver: local
  certbot-etc:
    driver: local
  certbot-var:
    driver: local

networks:
  labverse-secure-network:
    driver: bridge
    driver_opts:
      encrypted: "true"
    ipam:
      config:
        - subnet: 172.30.0.0/16
          gateway: 172.30.0.1